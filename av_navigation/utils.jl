function generate_dummy_graph()
    nodes = Dict(1 => Dict("pedestrian probability" => .5,
                           "vehicle probabilities" => [.4, .3, .2, .1],
                           "occlusion probability" => 0.5,
                           '→' => 2,
                           '←' => -1,
                           '↑' => -1,
                           '↓' => -1),
                 2 => Dict("pedestrian probability" => .5,
                            "vehicle probabilities" => [.4, .3, .2, .1],
                            "occlusion probability" => 0.5,
                            '→' => -1,
                            '←' => 1,
                            '↑' => -1,
                            '↓' => 3),
                 3 => Dict("pedestrian probability" => .5,
                            "vehicle probabilities" => [.4, .3, .2, .1],
                            "occlusion probability" => 0.5,
                            '→' => -1,
                            '←' => -1,
                            '↑' => 2,
                            '↓' => -1))
    edges = Dict(1 => Dict(2 => Dict("length" => 3,
                                     "direction" => '→',
                                     "num lanes" => 1,
                                     "obstruction probability" => 0.5)),
                 2 => Dict(1 => Dict("length" => 3,
                                     "direction" => '←',
                                     "num lanes" => 1,
                                     "obstruction probability" => 0.5),
                           3 => Dict("length" => 5,
                                     "direction" => '↓',
                                     "num lanes" => 2,
                                     "obstruction probability" => 0.7)),
                 3 => Dict(2 => Dict("length" => 5,
                                     "direction" => '↑',
                                     "num lanes" => 2,
                                     "obstruction probability" => 0.1)))
    G = Graph(nodes, edges)
end

function generate_ma_graph()
    nodes = Dict(1 => Dict("pedestrian probability" => .05,
                           "vehicle probabilities" => [.3, .1, .2, .4],
                           "occlusion probability" => 0.5),
                 2 => Dict("pedestrian probability" => .05,
                           "vehicle probabilities" => [.3, .1, .2, .4],
                           "occlusion probability" => 0.5),
                 3 => Dict("pedestrian probability" => .05,
                           "vehicle probabilities" => [.3, .1, .2, .4],
                           "occlusion probability" => 0.5),
                 4 => Dict("pedestrian probability" => .05,
                           "vehicle probabilities" => [.3, .1, .2, .4],
                           "occlusion probability" => 0.5),
                 5 => Dict("pedestrian probability" => .05,
                           "vehicle probabilities" => [.3, .1, .2, .4],
                           "occlusion probability" => 0.5),
                 6 => Dict("pedestrian probability" => .05,
                           "vehicle probabilities" => [.3, .1, .2, .4],
                           "occlusion probability" => 0.5),
                 7 => Dict("pedestrian probability" => .05,
                           "vehicle probabilities" => [.3, .1, .2, .4],
                           "occlusion probability" => 0.5),
                 8 => Dict("pedestrian probability" => .05,
                           "vehicle probabilities" => [.3, .1, .2, .4],
                           "occlusion probability" => 0.5),
                 9 => Dict("pedestrian probability" => .05,
                           "vehicle probabilities" => [.3, .1, .2, .4],
                           "occlusion probability" => 0.5),
                10 => Dict("pedestrian probability" => .05,
                           "vehicle probabilities" => [.3, .1, .2, .4],
                           "occlusion probability" => 0.5),
                11 => Dict("pedestrian probability" => .05,
                           "vehicle probabilities" => [.3, .1, .2, .4],
                           "occlusion probability" => 0.5),
                12 => Dict("pedestrian probability" => .05,
                           "vehicle probabilities" => [.3, .1, .2, .4],
                           "occlusion probability" => 0.5),
                13 => Dict("pedestrian probability" => .05,
                           "vehicle probabilities" => [.3, .1, .2, .4],
                           "occlusion probability" => 0.5),
                14 => Dict("pedestrian probability" => .05,
                           "vehicle probabilities" => [.3, .1, .2, .4],
                           "occlusion probability" => 0.5),
                15 => Dict("pedestrian probability" => .05,
                           "vehicle probabilities" => [.3, .1, .2, .4],
                           "occlusion probability" => 0.5),)

    edgeds = Dict(1 => Dict(2 => Dict("length" => 2.1,
                                     "direction" => '→',
                                     "num lanes" => 2,
                                     "obstruction probability" => 0.1),
                          13 => Dict("length" => 10.2,
                                     "direction" => '↓',
                                     "num lanes" => 3,
                                     "obstruction probability" => 0.1)),
                 2 => Dict(1 => Dict("length" => 2.1,
                                     "direction" => '←',
                                     "num lanes" => 2,
                                     "obstruction probability" => 0.1),
                           3 => Dict("length" => 2.1,
                                     "direction" => '→',
                                     "num lanes" => 2,
                                     "obstruction probability" => 0.1),
                           5 => Dict("length" => 9.4,
                                     "direction" => '↓',
                                     "num lanes" => 2,
                                     "obstruction probability" => 0.1)),
                 3 => Dict(2 => Dict("length" => 2.1,
                                     "direction" => '←',
                                     "num lanes" => 2,
                                     "obstruction probability" => 0.1),
                           4 => Dict("length" => 1.4,
                                     "direction" => '→',
                                     "num lanes" => 1))
                                     )

    return (nodes, edges)
end
